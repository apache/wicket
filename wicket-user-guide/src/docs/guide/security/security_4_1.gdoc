
@CryptoMapper@ helps preventing CSRF attacks by making the urls impossible to be guessed by an attacker but still there is some theoretical chance this to happen.

To further help against this kind of vulnerability Wicket provides @CsrfPreventionRequestCycleListener@ - a @IRequestCycleListener@ that forbids requests made from a different origin. By default only actions are forbidden, i.e. a request coming from different origin cannot execute @Link#onClick()@ or submit forms (@Form#onSubmit()@). Any request to render pages are still allowed so Wicket pages could be easily embedded in other applications.

MyApplication.java
{code}
  @Override
 protected void init() {
  super.init();
  getRequestCycleListeners().add(new CsrfPreventionRequestCycleListener());
  // ...
 }
{code}

@CsrfPreventionRequestCycleListener@ is highly configurable. It allows to define a whitelist of allowed origins via @addAcceptedOrigin(String acceptedOrigin)@, to enable/disable it dynamically by overriding @isEnabled()@, to define different kind of actions when a request is rejected or allowed, to set custom error message and code for the rejected requests.

@CsrfPreventionRequestCycleListener@ is not an alternative to @CryptoMapper@! Both of them could be used separately or in tandem to prevent CSRF attacks depending on the application requirements.
